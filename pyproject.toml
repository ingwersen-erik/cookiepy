# -- Project General Information -----------------------------------------------

[tool.poetry]
# Define project name, version, description, etc.
name = 'cookiepy'
version = "0.1.1"
description = 'Cookiecutter com template pra automação da criação de reposiórios Python para projetos.'
readme = 'README.rst'
authors = [ 'ingwersen-erik <erik.ingwersen@br.ey.com>' ]
license = 'MIT'
repository = "https://github.com/ingwersen-erik/cookiepy"
homepage = "https://github.com/ingwersen-erik/cookiepy"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]
packages = [
    { include = '**/*.py' },
]

# -- Project Dependencies ------------------------------------------------------

[tool.poetry.dependencies]
python = '>=3.8.1,<4.0'  # Python versions compatible with this project

black = { extras = ['d'], version = '^22.12.0', optional = false }
click = { version = '8.1.3', optional = false }
commitizen = { version =  "^2.38.0", optional = false }
cookiecutter = { version = '^2.1.1', optional = false }
flake8 = { version = '^6.0.0', optional = false }
github3-py = { version = '^3.2.0', optional = false }
mypy = { version = '^0.991', optional = false }
poetry = { version = '^1.1.12', optional = false }
pylint = { version = '^2.15.9', optional = false }
python-dotenv = { version = '0.21.1', optional = false }
tomli = { version = '^2.0.1', optional = false }
pyversions = "^0.0.3"
jupyter = "^1.0.0"


[tool.poetry.dev-dependencies]
# Define here any dependencies that are required during development and testing
# but that the final user does not need to run your code.


# -- Additional Plugins --------------------------------------------------------

[tool.poetry.group.dev.dependencies]
commitizen = "^2.38.0"

[tool.commitizen]
# Configure tool that helps normalize commit messages.
# Simply execute `cz commit` and the tool prompts you with commit-related
# messages that it uses to create a new commit message for you.
name = 'cz_conventional_commits'
version = "0.0.2"
tag_format = '$version'
version_files = [
    "pyproject.toml:version",
]
major_version_zero = true
allow_abort = true
update_change = true


# -- Define How to Build this Package ------------------------------------------
# Minimum requirements for the build system to execute.

[build-system]
build-backend = 'poetry.core.masonry.api'
requires = [
  'poetry-core>=1.0.0',
  'wheel',
  'setuptools',
]


# -- Linters Configuration -----------------------------------------------------
# Linters are tools that help you improve the quality and performance of your
# code by checking whether it conforms to certain industry standards
# and best practices. Here's an overview of the linters being configured:
#   - Black: helps formatting code.
#   - isort: analyzes project imports and optimizes, cleans it accordingly.
#   - MyPy: static type checker for Python that became sort of the type-hinting authority.

[tool.black]
# https://github.com/psf/black
target-version = ["py39"]
line-length = 80
color = true
include = '\.py?$'
extend-exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
    | \**\.ipynb
    | \**\.DS_Store
    | \**\.pyc
    | \docs
    | \website
    | \tests
    | \**\tests
    | \.nox
    | \**\.ipynb_checkpoints
    | \.github
    | \.vscode
    | \assets
    | \notebooks
)/
'''

[tool.isort]
profile = "black"
line_length = 80
multi_line_output = 3
indent = 4
combine_as_imports = true
color_output = true
ensure_newline_before_comments = true
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
extra_standard_library = [
  "typing_extensions",
  "_typeshed",
  # Extra modules not recognized by isort
  "_compression",
  "_csv",
  "_curses",
  "_markupbase",
  "_random",
  "_weakrefset",
  "genericpath",
  "opcode",
  "pyexpat",
]

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file

# Import discovery
mypy_path = "partial"
follow_imports = "normal"
pretty = true
show_traceback = true
color_output = true
namespace_packages = true
explicit_package_bases = true
follow_imports_for_stubs = true
no_site_packages = false
no_silence_site_packages = false

# Platform configurations
python_version = "3.8"

# Configurations to Disallow dynamic typing
disallow_any_decorated = false    # TODO
disallow_any_explicit = false     # TODO
disallow_any_expr = false         # TODO
disallow_any_unimported = false   # TODO
disallow_subclassing_any = false  # TODO
disallow_incomplete_defs = true
check_untyped_defs = true
ignore_missing_imports = true
disallow_any_generics = true

# None and Optional handling configurations
no_implicit_optional = true

# Warnings configurations
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = false # Change from pandas

# Suppressing errors configurations
show_none_errors = true
ignore_errors = false

# Miscellaneous strictness flags configurations
allow_redefinition = true
allow_untyped_globals = false
local_partial_types = true
implicit_reexport = true
strict_equality = true
strict_optional = true

# Error messages configurations
show_error_context = true
show_column_numbers = true
show_error_codes = true
